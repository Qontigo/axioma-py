"""
Copyright Â© 2024 Axioma by SimCorp.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

"""
import logging

from axiomapy.axiomaapi.enums import FinishedStatuses, Status
from axiomapy.entitybase import get_enum_value
from axiomapy.session import AxiomaSession

_logger = logging.getLogger(__name__)
_logger.addHandler(logging.NullHandler())

_finished_states = set(item.value.upper() for item in FinishedStatuses)


class AnalysesAPI:
    """This class provides access to more generic API methods which are common across various analyses, risk and performance

    """
    @staticmethod
    def get_analyses(request_id: int, as_csv: bool = False, return_response: bool = False):
        """The method is used to fetch the result of the analysis request.

        Args:
            request_id: Request id for the analysis request.
            as_csv: Option to return the results as CSV rather than JSON
            return_response: If set to true, the response will be returned

        Returns:
            The result of the analysis are returned.
        """
        url = f"/analyses/{request_id}"
        headers = None
        _logger.info(f"Getting from {url}")
        if as_csv:
            headers = {"Accept": "text/csv"}
        response = AxiomaSession.current._get(url, headers=headers, return_response=return_response)
        return response

    @staticmethod
    def get_analyses_log(request_id: int, return_response: bool = False):
        """This method returns the logs generated by the analysis request.

        Args:
            request_id: Request id for the analysis request.
            return_response: If set to true, the response will be returned

        Returns:
            The logs for the request are returned.
        """
        url = f"/analyses/{request_id}/logs"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(url, return_response=return_response)
        return response

    @staticmethod
    def get_analyses_status(
        request_id: int, return_response: bool = False
    ):
        """This method returns the status of the analysis request.

        Args:
            request_id: Request id for the analysis request.
            return_response: If set to true, the response will be returned

        Returns:
            Returns the success message along with the status.
        """
        url = f"/analyses/{request_id}/status"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, return_response=return_response
        )
        return response

    @staticmethod
    def status_is_running(status: str):
        """This method checks if the request is still running.

        Args:
            status: Pass the status in string format.

        Returns:
            True if status is anything but Failed or Completed.
        """
        return not status.upper() in _finished_states

    @staticmethod
    def status_is_complete(status: str):
        """This method checks if the status of analyses request is completed.

        Args:
            status: Pass the status in string format.

        Returns:
            True if the status is Completed.
        """
        status = get_enum_value(Status, status)
        return status == Status.Completed

    @staticmethod
    def get_analysis_is_running(
        request_id: int
    ) -> bool:
        """This method checks if the analysis is still running
        Args:
            request_id: The request id for the analysis.

        Returns:
            True if the analysis is running, else False.
        """
        response = AnalysesAPI.get_analyses_status(
            request_id=request_id
        )
        status = response.json().get("status", None)
        finished_or_unknown = status and not AnalysesAPI.status_is_running(status)
        return not finished_or_unknown


class AnalysesRiskAPI(AnalysesAPI):
    """Access API methods of risk analyses using the active session.

    """

    @staticmethod
    def post_portfolio_analyses(
        portfolio_id: int, analyses_parameters: dict, return_response: bool = False
    ):
        """This method creates a new portfolio risk analysis request and submits it for processing.

        Args:
            portfolio_id: id of the portfolio to run analysis on.
            analyses_parameters: the parameters of analysis to run
            return_response: If set to true, the response will be returned

        Returns:
            Returns the request accepted response
        """
        url = f"/analyses/risk/portfolios/{portfolio_id}"
        _logger.info(f"Posting to {url}")
        response = AxiomaSession.current._post(
            url, json=analyses_parameters, return_response=return_response
        )
        return response

    @staticmethod
    def post_positions_analyses(
        analyses_parameters: dict, return_response: bool = False
    ):
        """This method creates a new dynamic positions risk analysis request and submits it for processing

        Args:
            analyses_parameters: The parameters of the analysis to run
            return_response: If set to true, the response will be returned

        Returns:
            Returns the request accepted response
        """
        url = "/analyses/risk/positions"
        _logger.info(f"Posting to {url}")
        response = AxiomaSession.current._post(
            url, json=analyses_parameters, return_response=return_response
        )
        return response

    @staticmethod
    def post_instrument_analyses(
        analyses_parameters: dict, return_response: bool = False
    ):
        """This method queues an instrument analysis request

        Args:
            analyses_parameters: the parameters to run an instrument analysis; this includes, analysis date, instrument identifiers and analysis definition
            return_response: If set to true, the response will be returned

        Returns:
            Returns the request accepted response
        """
        url = "analyses/instruments"
        _logger.info(f"Posting to {url}")
        response = AxiomaSession.current._post(
            url, json=analyses_parameters, return_response=return_response
        )
        return response

    @staticmethod
    def post_batch_analyses(analyses_parameters: dict, return_response: bool = False):
        """This method creates a new batch risk analysis request and submits it for processing

        Args:
            analyses_parameters: the parameters to run a risk analysis request
            return_response: If set to true, the response will be returned

        Returns:
            Returns the request accepted response
        """
        url = "/analyses/risk/batches"
        _logger.info(f"Posting to {url}")
        response = AxiomaSession.current._post(
            url, json=analyses_parameters, return_response=return_response
        )
        return response

    @staticmethod
    def get_portfolio_request(
        request_id: int, original: bool = False, return_response: bool = False
    ):
        """This method returns the request of a portfolio risk analysis

        Args:
            request_id: id of the risk analysis request
            original: If set to true, the original request provided by the user will be returned.
            return_response: If set to true, the response will be returned.

        Returns:
            Returns the risk analysis request
        """
        url = f"analyses/risk/portfolios/{request_id}/request"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, params={"original": original}, return_response=return_response
        )
        return response

    @staticmethod
    def get_positions_request(
        request_id: int, original: bool = False, return_response: bool = False
    ):
        """This method retrieves the request of a positions risk analysis

        Args:
            request_id: request id of the initial request
            original: If set to true, the original request provided by the user will be returned
            return_response: If set to true, the response will be returned

        Returns:
            Returns the risk analysis request
        """
        url = f"analyses/risk/positions/{request_id}/request"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, params={"original": original}, return_response=return_response
        )
        return response

    @staticmethod
    def get_instruments_request(
        request_id: int, original: bool = False, return_response: bool = False
    ):
        """This method returns the instrument analysis request

        Args:
            request_id: id of the initial request
            original: If set to true, the original request provided by the user will be returned
            return_response: If set to true, the response will be returned

        Returns:
            Returns the instrument analysis request
        """
        url = f"analyses/instruments/{request_id}/request"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, params={"original": original}, return_response=return_response
        )
        return response

    @staticmethod
    def get_batch_request(
        request_id: int, original: bool = False, return_response: bool = False
    ):
        """This method returns the request of a batch risk analysis request

        Args:
            request_id: id of the initial request
            original: If set to true, the original request provided by the user will be returned
            return_response: If set to true, the response will be returned

        Returns:
            Returns the batch risk analysis request
        """
        url = f"analyses/risk/batches/{request_id}/request"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, params={"original": original}, return_response=return_response
        )
        return response

    @staticmethod
    def get_batch_request_status(
        request_id: int,
        headers=None,
        return_response: bool = False,
    ):
        """This method fetches the status of the batch analysis task

        Args:
            request_id: id of the risk analysis request
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Returns the status of request in json format
        """
        url = f"/analyses/risk/batches/{request_id}/status"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, headers=headers, return_response=return_response
        )
        return response

    @staticmethod
    def post_risk_model_request(
        risk_model_parameters: dict, headers=None, return_response: bool = False
    ):
        """This method creates and runs a risk model analysis task

        Args:
            risk_model_parameters: definition of a risk model instance; this will include analysis date and risk model definition id
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Returns the request accepted response
        """
        url = "/analyses/risk/risk-models"
        _logger.info(f"Posting to {url}")
        response = AxiomaSession.current._post(
            url,
            json=risk_model_parameters,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_risk_model_request(
        request_id: int, original: bool = False, return_response: bool = False
    ):
        """This method returns the request for a risk model analysis request

        Args:
            request_id: id of the initial risk model request
            original: If set to true, the original request provided by the user will be returned
            return_response: If set to true, the response will be returned

        Returns:
            Returns the initial risk model analysis request
        """
        url = f"analyses/risk/risk-models/{request_id}/request"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, params={"original": original}, return_response=return_response
        )
        return response

    @staticmethod
    def get_risk_model_logs(
        request_id: int, headers: dict = None, return_response: bool = False
    ):
        """This method returns the logs generated by a risk model analysis request.
        It searches the ServicesCache for RiskModelAnalysisLogs, CovarianceComputationsLogs and InstrumentAnalyticsLogs

        Args:
            request_id: id of the initial risk model request
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Logs for the risk model request
        """
        url = f"/analyses/risk/risk-models/{request_id}/logs"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, headers=headers, return_response=return_response
        )
        return response

    @staticmethod
    def get_risk_model_results(
        request_id: int,
        show_raw_results: bool = False,
        headers: dict = None,
        stream: bool = False,
        return_response: bool = False,
    ):
        """This method fetches the results of the risk model instance task

        Args:
            request_id: id of the risk model request
            show_raw_results: If set to true, returns raw results
            headers: Optional headers if any needed (Correlation ID , Accept-Encoding)
            stream: If set to True, response will be streamed; else the response will be downloaded.
            return_response: If set to true, the response will be returned

        Returns:
            Results of the risk model analysis are returned in json format
        """
        param = {"showRawResults": show_raw_results}
        url = f"/analyses/risk/risk-models/{request_id}"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url,
            headers=headers,
            params=param,
            stream=stream,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_risk_model_request_status(
        request_id: int,
        headers=None,
        return_response: bool = False,
    ):
        """This method fetches the status of the risk model analysis task

        Args:
            request_id: id of the risk analysis request
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Returns the status of request in json format
        """
        url = f"/analyses/risk/risk-models/{request_id}/status"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, headers=headers, return_response=return_response
        )
        return response


class AnalysesPerformanceAPI():
    """Access api methods of performance analysis using the active session

    """
    @staticmethod
    def get_logs(request_id: int, return_response: bool = False):
        """This method fetches the logs generated by a performance analysis request

        Args:
            request_id: id of the request
            return_response: If set to true, the response will be returned

        Returns:
            Logs for the request in json format
        """
        url = f"/analyses/performance/{request_id}/logs"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(url)
        return response

    @staticmethod
    def get_request(
        request_id: int, original: bool = False, return_response: bool = False
    ):
        """This method retrieves the job details of a performance attribution task

        Args:
            request_id: id returned when the performance attribution task is submitted
            original: If set to true, the original request provided by the user will be returned.
            return_response: If set to true, the response will be returned.

        Returns:
            Returns the request corresponding to the request id

        """
        url = f"analyses/performance/{request_id}/request"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, params={"original": original}, return_response=return_response
        )
        return response

    @staticmethod
    def get_results_asset_factor_contributions(
        request_id: int,
        stream: bool = False,
        headers: dict = None,
        security_name: str = None,
        security_code: str = None,
        return_response: bool = False,
    ):
        """This method retrieves the asset factor contributions report from the attribution analysis

        Args:
            request_id: id returned when the performance attribution task is submitted
            stream: If set to True, response will be streamed; else the response will be downloaded.
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            security_name: optional, retrieves result for the specified security name
            security_code: optional, retrieves result for the specified security code
            return_response: If set to true, the response will be returned

        Returns:
            Asset factor contributions in json or csv format
        """
        params = None
        if security_code is not None:
            params = {"securityCode": security_code}
        if security_name is not None:
            if params is None:
                params = {"securityName": security_name}
            else:
                params["securityName"] = security_name

        url = f"/analyses/performance/{request_id}/results/asset-factor-contributions"
        _logger.info(f"Getting from {url}")

        response = AxiomaSession.current._get(
            url,
            stream=stream,
            headers=headers,
            params=params,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_results_asset_returns(
        request_id: int,
        stream: bool = False,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method fetches the asset returns report from the attribution analysis

        Args:
            request_id: id returned when the performance attribution task is submitted
            stream: If set to True, response will be streamed; else the response will be downloaded.
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Asset returns in json or csv format
        """
        url = f"/analyses/performance/{request_id}/results/asset-returns"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url,
            stream=stream,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_results_brinson_attribution(
        request_id: int,
        stream: bool = False,
        headers: dict = None,
        return_response: bool = False,
    ):
        """The method gets the Brinson attribution report from the attribution analysis

        Args:
            request_id: id returned when the performance attribution task is submitted
            stream: If set to True, the response will be streamed; else, the response will be downloaded.
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Brinson attribution results in json or csv format
        """
        url = f"/analyses/performance/{request_id}/results/brinson-attribution"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url,
            stream=stream,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_results_brinson_attribution_time_series(
        request_id: int,
        stream: bool = False,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method returns the Brinson attribute time series report from the attribution analysis

        Args:
            request_id: id returned when the performance attribution task is submitted
            stream: If set to True, response will be streamed; else, the response will be downloaded.
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            results in csv or json format
        """
        url = (
            f"/analyses/performance/{request_id}/"
            "results/brinson-attribution-time-series"
        )
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url,
            stream=stream,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_results_factor_attribution(
        request_id: int,
        stream: bool = False,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method returns the factor attribution report from the attribution analysis

        Args:
            request_id: id returned when the performance attribution task is submitted
            stream: If set to True, response will be streamed; else, the response will be downloaded.
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            results in csv or json format
        """
        url = f"/analyses/performance/{request_id}/results/factor-attribution"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url,
            stream=stream,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_results_factor_attribution_time_series(
        request_id: int,
        stream: bool = False,
        headers: dict = None,
        date_: str = None,
        return_response: bool = False,
    ):
        """This method returns factor attribution time series report from the attribution analysis

        Args:
            request_id: id returned when the performance attribution task is submitted
            stream: If set to True, the response will be streamed; else the response will be downloaded.
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            date: (optional) the results will be limited to the date given.
            return_response: If set to true, the response will be returned.

        Returns:
            results in csv or json format
        """
        params = None
        if date_ is not None:
            params = {"date": date_}

        url = (
            f"/analyses/performance/{request_id}/results/factor-attribution-time-series"
        )
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url,
            stream=stream,
            headers=headers,
            params=params,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_results_summary(
        request_id: int,
        stream: bool = False,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method returns the summary of the attribution analysis request

        Args:
            request_id: id returned when the performance attribution task is submitted
            stream: If set to True, response will be streamed; else the response will be downloaded.
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            summary results for attribution request

        """
        url = f"/analyses/performance/{request_id}/results/summary"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url,
            stream=stream,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_results_warnings_errors(
        request_id: int,
        stream: bool = False,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method provides user with the warnings and errors report from the attribution analysis request

        Args:
            request_id: id returned when the performance attribution task is submitted
            stream: If set to True, response will be streamed; else the response will be downloaded.
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            returns logs of errors or warnings in csv or json format
        """
        url = f"/analyses/performance/{request_id}/results/warnings-and-errors"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url,
            stream=stream,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_status(
        request_id: int,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method returns the status of the analysis request

        Args:
            request_id: id returned when the performance attribution task is submitted
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Returns the status of the attribution request
        """
        url = f"/analyses/performance/{request_id}/status"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, headers=headers, return_response=return_response,
        )
        return response

    @staticmethod
    def get_report_status(
        portfolio_id: int,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method returns a collection of summaries of all the performance attribution jobs that have been run against a given portfolio

        Args:
            portfolio_id: id of portfolio to check for existing performance attribution jobs
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            A list of summaries of PA jobs run against the given portfolio
        """
        url = f"/analyses/performance/portfolios/{portfolio_id}/report-status"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, headers=headers, return_response=return_response,
        )
        return response

    @staticmethod
    def post_performance_analysis(
        portfolio_id: int,
        analyses_parameters: dict,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method creates a performance analysis

        Args:
            portfolio_id: id of the portfolio
            analyses_parameters: Parameters for the PA request
            headers: Optional headers, if any required (Correlation ID , Content-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Success message when the request id created
        """
        url = f"analyses/performance/portfolios/{portfolio_id}"
        _logger.info(f"Posting to {url}")
        response = AxiomaSession.current._post(
            url,
            json=analyses_parameters,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def post_missing_precomputed(
        portfolio_id: int,
        precompute_dates_parameters: dict,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method returns the non pre-computed dates for the given inputs

        Args:
            portfolio_id: id of the portfolio
            precompute_dates_parameters: parameters for pre-compute
            headers: Optional headers, if any required (Correlation ID , Content-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Success message if the request is placed successfully
        """
        url = (
            "analyses/performance/portfolios/"
            f"{portfolio_id}/missing-precomputed-analytics"
        )
        _logger.info(f"Posting to {url}")
        response = AxiomaSession.current._post(
            url,
            json=precompute_dates_parameters,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def post_precompute(
        portfolio_id: int,
        precompute_parameters: dict,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method starts a job to pre-calculate the analytics results that form the inputs to performance attribution task

        Args:
            portfolio_id: id of the portfolio
            precompute_parameters: parameters for performance attribution request
            headers: Optional headers, if any required (Correlation ID , Content-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Success message when the request is submitted
        """
        url = f"analyses/performance/portfolios/{portfolio_id}/precompute-analytics"
        _logger.info(f"Posting to {url}")
        response = AxiomaSession.current._post(
            url,
            json=precompute_parameters,
            headers=headers,
            return_response=return_response,
        )
        return response

    @staticmethod
    def get_brinson_asset_returns(
        request_id: int,
        headers: dict = None,
        return_response: bool = False,
    ):
        """This method returns Brinson Asset Returns report from the attribution analysis with the given request id

        Args:
            request_id: Request id for the analysis request
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned

        Returns:
            Brinson Asset Returns in json or csv format
        """
        url = f"/analyses/performance/{request_id}/results/brinson-asset-returns"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, headers=headers, return_response=return_response,
        )
        return response

    @staticmethod
    def get_summary_time_series(
            request_id: int,
            headers: dict = None,
            return_response: bool = False,
            report_frequency: str = "Default"
    ):
        """This method returns Summary Time Series report from the attribution analysis with the given request id

        Args:
            request_id: Request id for the analysis request
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned
            report_frequency: Frequency of the report, Available values : Default, Daily, Monthly

        Returns:
            Summary Time Series Report in json
        """
        url = f"/analyses/performance/{request_id}/results/summary-time-series?reportFrequency={report_frequency}"
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, headers=headers, return_response=return_response,
        )
        return response

    @staticmethod
    def get_asset_details_time_series(
            request_id: int,
            headers: dict = None,
            return_response: bool = False,
            security_name:str = None,
            security_code:str = None,
            request_date:str = None
    ):
        """This method returns Asset Details Time Series report from the attribution analysis with the given request id. At least one of the following filters must be provided: securityName, securityCode, or date.

        Args:
            request_id: Request id for the analysis request
            headers: Optional headers, if any required (Correlation ID , Accept-Encoding)
            return_response: If set to true, the response will be returned
            security_name: Retrieves results for specific security name
            security_code: Retrieves results for specific security code
            request_date: Retrieves results for specific date (yyyy-MM-dd)

        Returns:
            Summary Time Series Report in json
        """
        filter_string=""
        if security_code is not None:
            filter_string=f"{filter_string}securityCode={security_code}&"
        if security_name is not None:
            filter_string = f"{filter_string}securityName={security_name}&"
        if request_date is not None:
            filter_string = f"{filter_string}date={request_date}&"
        url = f"/analyses/performance/{request_id}/results/asset-details-time-series?{filter_string}"[:-1]
        _logger.info(f"Getting from {url}")
        response = AxiomaSession.current._get(
            url, headers=headers, return_response=return_response,
        )
        return response